package fr.pchab.androidrtc.baseimport android.annotation.SuppressLintimport android.content.Contextimport android.text.TextUtilsimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.widget.Toolbarimport androidx.fragment.app.Fragmentimport io.github.inflationx.viewpump.ViewPumpContextWrapper@SuppressLint("Registered")open class BaseActivity : AppCompatActivity() {    companion object {        const val PERMISSIONS_REQUEST_CODE = 6969    }    override fun attachBaseContext(newBase: Context) {        super.attachBaseContext(ViewPumpContextWrapper.wrap(newBase))    }    fun showFragment(        containerId: Int,        fragment: Fragment?    ) {        fragment?.let {            val ft = supportFragmentManager.beginTransaction()            ft.replace(containerId, it)            ft.commitAllowingStateLoss()        }    }    fun initToolBar(toolbar: Toolbar, title: String? = null, icon: Int? = null) {        setSupportActionBar(toolbar)        toolbar.setContentInsetsAbsolute(0, 0)        if (icon != null) {            supportActionBar?.setDisplayHomeAsUpEnabled(true)            toolbar.setNavigationIcon(icon)        }        if (!TextUtils.isEmpty(title)) {            supportActionBar?.title = title            supportActionBar?.setDisplayShowTitleEnabled(true)        } else {            supportActionBar?.setDisplayShowTitleEnabled(false)        }    }    fun initToolBar(toolbar: Toolbar, icon: Int) {        setSupportActionBar(toolbar)        toolbar.setContentInsetsAbsolute(0, 0)        if (icon != 0) {            supportActionBar?.setDisplayHomeAsUpEnabled(true)            toolbar.setNavigationIcon(icon)        }        supportActionBar?.setDisplayShowTitleEnabled(false)    }}